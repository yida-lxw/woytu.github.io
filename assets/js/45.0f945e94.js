(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{632:function(t,e,_){"use strict";_.r(e);var r=_(4),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"技术概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#技术概念"}},[t._v("#")]),t._v(" 技术概念")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#flag"}},[t._v("Flag")])]),_("li",[_("a",{attrs:{href:"#编程范式"}},[t._v("编程范式")])]),_("li",[_("a",{attrs:{href:"#设计模式及原则"}},[t._v("设计模式及原则")])]),_("li",[_("a",{attrs:{href:"#数据结构与算法"}},[t._v("数据结构与算法")]),_("ul",[_("li",[_("a",{attrs:{href:"#算法复杂度"}},[t._v("算法复杂度")])])])]),_("li",[_("a",{attrs:{href:"#数据传输模型"}},[t._v("数据传输模型")])]),_("li",[_("a",{attrs:{href:"#网络通信协议"}},[t._v("网络通信协议")]),_("ul",[_("li",[_("a",{attrs:{href:"#http"}},[t._v("HTTP")])])])]),_("li",[_("a",{attrs:{href:"#迭代循环遍历递归"}},[t._v("迭代循环遍历递归")])]),_("li",[_("a",{attrs:{href:"#directory和folder区别"}},[t._v("directory和folder区别")])]),_("li",[_("a",{attrs:{href:"#多线程"}},[t._v("多线程")]),_("ul",[_("li",[_("a",{attrs:{href:"#线程数量控制"}},[t._v("线程数量控制")])])])]),_("li",[_("a",{attrs:{href:"#缓存"}},[t._v("缓存")])]),_("li",[_("a",{attrs:{href:"#锁和事务"}},[t._v("锁和事务")])]),_("li",[_("a",{attrs:{href:"#http授权认证"}},[t._v("HTTP授权认证")]),_("ul",[_("li",[_("a",{attrs:{href:"#oauth2和jwt区别与联系"}},[t._v("OAuth2和JWT区别与联系")])])])]),_("li",[_("a",{attrs:{href:"#加密哈希"}},[t._v("加密哈希")])]),_("li",[_("a",{attrs:{href:"#cicd"}},[t._v("CICD")])])])]),_("p"),t._v(" "),_("h2",{attrs:{id:"flag"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#flag"}},[t._v("#")]),t._v(" Flag")]),t._v(" "),_("ul",[_("li",[t._v("代码不是靠死记硬背，而是不停的写、不停的思考，在反复的练习中熟练掌握的。")]),t._v(" "),_("li",[t._v("编程需要学习记住的是：不同的场景中一些实现方式的原理机制、思维方式，如：设计模式、排序算法、数据结构等，而不是具体的代码。")]),t._v(" "),_("li",[_("strong",[t._v("千万不要尝试用记忆力去替代自己的理解力！")])])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("角色访问控制模型RBAC96"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://my.oschina.net/cloudcross/blog/1920706",target:"_blank",rel:"noopener noreferrer"}},[t._v("权限设计的杂谈"),_("OutboundLink")],1)])]),t._v(" "),_("blockquote",[_("p",[t._v("RESTful是一种架构风格，其核心是面向资源，更简单；而WebService底层SOAP协议，主要核心是面向活动；两个都是通过web请求调用接口")])]),t._v(" "),_("ul",[_("li",[t._v("C++ 那些事: "),_("a",{attrs:{href:"https://github.com/Light-City/CPlusPlusThings",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Light-City/CPlusPlusThings"),_("OutboundLink")],1)])]),t._v(" "),_("p",[_("strong",[t._v("逃逸分析（Escape Analysis）")])]),t._v(" "),_("blockquote",[_("p",[t._v("是编译器用来决定程序中值的位置的过程。编译器执行静态代码分析，以确定一个构造体的实例化值是否会逃逸到堆")])]),t._v(" "),_("blockquote",[_("p",[t._v("逃逸是指在某个方法之内创建的对象，除了在方法体之内被引用之外，还在方法体之外被其它变量引用到；\n这样带来的后果是在该方法执行完毕之后，该方法中创建的对象将无法被GC回收，由于其被其它变量引用。\n正常的方法调用中，方法体中创建的对象将在执行完毕之后，将回收其中创建的对象；故由于无法回收，即成为逃逸。")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000016803174",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java中的逃逸分析"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://gogeof.github.io/2018/02/12/%E3%80%90%E8%AF%91%E3%80%91Go-%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("【译】Go 语言机制之逃逸分析"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"编程范式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[t._v("#")]),t._v(" 编程范式")]),t._v(" "),_("blockquote",[_("p",[t._v("编程范型、编程范式或程序设计法（Programming Paradigm）是某种编程语言典型的编程风格或者说是编程方式")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Programming_paradigm",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://en.wikipedia.org/wiki/Programming_paradigm"),_("OutboundLink")],1)])]),t._v(" "),_("blockquote",[_("p",[t._v("范类：强类型/弱类型，动态语言/静态语言，编译/解释")])]),t._v(" "),_("ul",[_("li",[t._v("过程化（命令式）编程")]),t._v(" "),_("li",[t._v("事件驱动编程")]),t._v(" "),_("li",[t._v("面向对象编程")]),t._v(" "),_("li",[t._v("链式编程")]),t._v(" "),_("li",[t._v("函数式编程")]),t._v(" "),_("li",[t._v("并发编程")]),t._v(" "),_("li",[t._v("约束编程")]),t._v(" "),_("li",[t._v("数据流编程（Dataflow programming）")]),t._v(" "),_("li",[t._v("声明性编程")]),t._v(" "),_("li",[t._v("分布式的编程")]),t._v(" "),_("li",[t._v("泛型编程")]),t._v(" "),_("li",[t._v("逻辑编程")]),t._v(" "),_("li",[t._v("元编程")]),t._v(" "),_("li",[t._v("响应式/反应式编程（Reactive programming）")]),t._v(" "),_("li",[t._v("面向方面/面向切面编程（AOP）")]),t._v(" "),_("li",[t._v("过程式编程")])]),t._v(" "),_("h2",{attrs:{id:"设计模式及原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式及原则"}},[t._v("#")]),t._v(" 设计模式及原则")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"http://c.biancheng.net/design_pattern",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java设计模式：23种设计模式全面解析（超级详细）"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("设计模式 "),_("a",{attrs:{href:"https://github.com/RefactoringGuru",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/RefactoringGuru"),_("OutboundLink")],1),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://refactoringguru.cn/design-patterns",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://refactoringguru.cn/design-patterns"),_("OutboundLink")],1)])])]),t._v(" "),_("li",[t._v("C++ 设计模式: "),_("a",{attrs:{href:"https://github.com/JakubVojvoda/design-patterns-cpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/JakubVojvoda/design-patterns-cpp"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"数据结构与算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),_("ul",[_("li",[t._v("主流语言数据结构和算法学习 "),_("a",{attrs:{href:"https://github.com/TheAlgorithms",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/TheAlgorithms"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://mp.weixin.qq.com/s/mq2NSG3xMqIs28nU354TjQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("必学十大经典排序算法"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"http://c.biancheng.net/data_structure",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构与算法教程，数据结构C语言版教程"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("用C实现的所有算法 "),_("a",{attrs:{href:"https://github.com/TheAlgorithms/C",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/TheAlgorithms/C"),_("OutboundLink")],1)])]),t._v(" "),_("h3",{attrs:{id:"算法复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度"}},[t._v("#")]),t._v(" 算法复杂度")]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("O(1)")]),t._v("、 "),_("code",[t._v("O(n)")]),t._v("、 "),_("code",[t._v("O(logn)")]),t._v("、 "),_("code",[t._v("O(nlogn)")]),t._v(" 可表示时间复杂度，也可以表示空间复杂度")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("O")]),t._v("加上"),_("code",[t._v("()")]),t._v("里面是一个函数"),_("code",[t._v("f()")]),t._v("即"),_("code",[t._v("O(f())")]),t._v("，函数指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的"),_("code",[t._v("n")]),t._v("代表输入数据的量。")])]),t._v(" "),_("blockquote",[_("p",[t._v("如果"),_("code",[t._v("ax=N")]),t._v("（"),_("code",[t._v("a>0")]),t._v("，且"),_("code",[t._v("a≠1")]),t._v("），那么数"),_("code",[t._v("x")]),t._v("叫做以"),_("code",[t._v("a")]),t._v("为底"),_("code",[t._v("N")]),t._v("的对数，记作"),_("code",[t._v("x=logaN")]),t._v("，读作以"),_("code",[t._v("a")]),t._v("为底"),_("code",[t._v("N")]),t._v("的对数，其中"),_("code",[t._v("a")]),t._v("叫做对数的底数，"),_("code",[t._v("N")]),t._v("叫做真数。")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://blog.csdn.net/FeiPeng_/article/details/81030981",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法复杂度中的O(logN)底数是什么"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/biehongli/p/11672380.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("时间复杂度o(1), o(n), o(logn), o(nlogn)"),_("OutboundLink")],1)])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类型")]),t._v(" "),_("th",[t._v("意义")]),t._v(" "),_("th",[t._v("举例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("最低复杂度，常量值也就是耗时/ 耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变")]),t._v(" "),_("td",[t._v("哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标 (不考虑冲突的话)")])]),t._v(" "),_("tr",[_("td",[t._v("O(n)")]),t._v(" "),_("td",[t._v("数据量增大几倍，耗时也增大几倍")]),t._v(" "),_("td",[t._v("遍历算法")])]),t._v(" "),_("tr",[_("td",[t._v("O(n^2)")]),t._v(" "),_("td",[t._v("对n个数排序，需要扫描 n x n 次")]),t._v(" "),_("td",[t._v("冒泡排序")])]),t._v(" "),_("tr",[_("td",[t._v("O(logn)")]),t._v(" "),_("td",[t._v("当数据增大n倍时，耗时增大logn 倍(这里的log是以2为底的，比 如，当数据增大256倍时，耗时只增大8倍,")]),t._v(" "),_("td",[t._v("二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标")])]),t._v(" "),_("tr",[_("td",[t._v("O(nlogn)")]),t._v(" "),_("td",[t._v("就是n乘以logn,当数据增大256倍 时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。")]),t._v(" "),_("td",[t._v("归并排 序就是O(nlogn)的时间复杂度")])])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("数据结构")]),t._v(" "),_("th",[t._v("查找（平均）")]),t._v(" "),_("th",[t._v("查找（最坏）")]),t._v(" "),_("th",[t._v("插入（平均）")]),t._v(" "),_("th",[t._v("插入（最坏）")]),t._v(" "),_("th",[t._v("删除（平均）")]),t._v(" "),_("th",[t._v("删除（最坏）")]),t._v(" "),_("th",[t._v("遍历")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("数组")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("有序数组")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(n)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("链表")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("有序链表")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("二叉查找树")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("红黑树")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("平衡树")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("二叉堆 优先队列")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(logN)")]),t._v(" "),_("td",[t._v("O(N)")])]),t._v(" "),_("tr",[_("td",[t._v("哈希表")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(1)")]),t._v(" "),_("td",[t._v("O(N)")])])])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/labuladong/fucking-algorithm",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/labuladong/fucking-algorithm"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"数据传输模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据传输模型"}},[t._v("#")]),t._v(" 数据传输模型")]),t._v(" "),_("blockquote",[_("p",[t._v("该模型用于帮助人们解决应用程序与服务器传递数据的问题")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/246b95d959a0",target:"_blank",rel:"noopener noreferrer"}},[t._v("JMS Java消息服务(Java Message Service)"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[t._v("Web Service 模型\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383487",target:"_blank",rel:"noopener noreferrer"}},[t._v("SOAP"),_("OutboundLink")],1),t._v(" 模型（面向消息）")]),t._v(" "),_("li",[t._v("RPC 模型（面向方法）\n"),_("ul",[_("li",[_("a",{attrs:{href:"http://www.xmlrpc.com/spec",target:"_blank",rel:"noopener noreferrer"}},[t._v("XML-RPC"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"http://json-rpc.org/wiki/specification",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON-RPC"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("SOAP + WSDL [SOAP 本质上是 XML-RPC 的升级版]")])])]),t._v(" "),_("li",[t._v("REST(Representational State Transfer) 模型（面向资源）\n"),_("ul",[_("li",[t._v("RestFul API")]),t._v(" "),_("li",[t._v("GraphQL")])])])])]),t._v(" "),_("li",[t._v("SOA（面向服务的架构）")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/8f1c70e42d32",target:"_blank",rel:"noopener noreferrer"}},[t._v("技术概念大揭秘-RPC/Restful/HTTP/SOAP/WebService傻傻分不清楚？"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/41609070",target:"_blank",rel:"noopener noreferrer"}},[t._v("既然有 HTTP 请求，为什么还要用 RPC 调用？"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[t._v("HTTP接口：基于HTTP协议的开发接口，如HTTP POST/GET")]),t._v(" "),_("li",[t._v("SOAP接口：是一种轻量的、简单的、基于XML（标准通用标记语言下的一个子集）的协议，它被设计成在WEB上交换结构化的和固化的信息。")]),t._v(" "),_("li",[t._v("Restful接口：一种接口规范，符合这套规范编写的接口就是restful 接口")]),t._v(" "),_("li",[t._v("Webservice接口：一种跨编程语言和跨操作系统平台的远程调用技术。SOAP/Restful都属于WebService接口。主要是系统间的调用。")]),t._v(" "),_("li",[t._v("RPC协议：远程过程调用，它是一种通过网络从远程计算机程序上跨语言跨平台的请求服务。主要是分布式式系统中应用。")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/42061683",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何通俗易懂地解释什么是SOA？"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/aisuhua/restful-api-design-references",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful API 设计参考文献列表"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/cd7bfa8d51b7",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful跟WebService的区别"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/mayite/p/9798913.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful API设计规范"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/godruoyi/restful-api-specification",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful API 设计规范"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/graphql",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/graphql"),_("OutboundLink")],1),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://graphql.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://graphql.org"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/chentsulin/awesome-graphql",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/chentsulin/awesome-graphql"),_("OutboundLink")],1)])])])]),t._v(" "),_("ul",[_("li",[t._v("Google的数据交换格式 "),_("a",{attrs:{href:"https://github.com/protocolbuffers",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/protocolbuffers"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/grpc",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/grpc"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/hprose",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/hprose"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"网络通信协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络通信协议"}},[t._v("#")]),t._v(" 网络通信协议")]),t._v(" "),_("p",[_("strong",[t._v("应用层")])]),t._v(" "),_("ul",[_("li",[t._v("HTTP（Hypertext Transfer Protocol）超文本传输协议，显示网页")]),t._v(" "),_("li",[t._v("DNS（Domain Name System）")]),t._v(" "),_("li",[t._v("FTP（File Transfer Protocol）")]),t._v(" "),_("li",[t._v("SFTP（SSH File Transfer Protocol）和FTP不一样")]),t._v(" "),_("li",[t._v("SCP（Secure copy）基于SSH")]),t._v(" "),_("li",[t._v("SSH （Secure Shell）")]),t._v(" "),_("li",[t._v("SMTP（Simple Mail Transfer Protocol）")]),t._v(" "),_("li",[t._v("SNMP（simple Network Management Protocol）")]),t._v(" "),_("li",[t._v("Socket 是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。\n"),_("ul",[_("li",[t._v("在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面")])])])]),t._v(" "),_("p",[_("strong",[t._v("通信层")])]),t._v(" "),_("ul",[_("li",[t._v("TCP（Transmission Control Protocol）三次握手传输协议\n"),_("ul",[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/AhuntSun-blog/p/12028636.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解TCP连接的“三次握手”与“四次挥手”"),_("OutboundLink")],1)])])]),t._v(" "),_("li",[t._v("UDP（User Datagram Protocol）用户数据报协议")])]),t._v(" "),_("p",[_("strong",[t._v("网络层")])]),t._v(" "),_("ul",[_("li",[t._v("IP（Internet Protocol）")]),t._v(" "),_("li",[t._v("ICMP（Internet Control Message Protocol，主要用于路由发送错误报告）")]),t._v(" "),_("li",[t._v("IGMP")])]),t._v(" "),_("p",[_("strong",[t._v("链接层")])]),t._v(" "),_("ul",[_("li",[t._v("MAC（media access control）")]),t._v(" "),_("li",[t._v("ARP")]),t._v(" "),_("li",[t._v("RARP")])]),t._v(" "),_("h3",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://github.com/whatwg",target:"_blank",rel:"noopener noreferrer"}},[t._v("WHATWG技术的标准"),_("OutboundLink")],1),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://spec.whatwg.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://spec.whatwg.org"),_("OutboundLink")],1)])])]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.iana.org/assignments/media-types/media-types.xhtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("互联网号码分配机构（IANA）官方MIME类型列表"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://tool.oschina.net/commons",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用对照表"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.runoob.com/http/http-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.runoob.com/http/http-tutorial.html"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/HTTP"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://stephanietang.github.io/2020/04/19/how-https-works",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS的工作原理"),_("OutboundLink")],1)])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("Content-Type")]),t._v("只会存在于"),_("code",[t._v("POST")]),t._v("、"),_("code",[t._v("PATCH")]),t._v("、"),_("code",[t._v("PUT")]),t._v("等有请求数据实体时指定数据类型和数据字符集编码，\n而"),_("code",[t._v("GET")]),t._v("、"),_("code",[t._v("DELETE")]),t._v("、"),_("code",[t._v("HEAD")]),t._v("、"),_("code",[t._v("OPTIONS")]),t._v("、"),_("code",[t._v("TRACE")]),t._v("等没有请求数据实体")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("Content-Length")]),t._v("则视"),_("code",[t._v("Content-Type")]),t._v("而定，如"),_("code",[t._v("text/html")]),t._v("、"),_("code",[t._v("text/javascript")]),t._v("等请求数据没有"),_("code",[t._v("Content-Length")])])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("POST")]),t._v("、"),_("code",[t._v("PATCH")]),t._v("、"),_("code",[t._v("PUT")]),t._v("等请求有请求数据实体的数据为表单参数，\n"),_("code",[t._v("GET")]),t._v("、"),_("code",[t._v("DELETE")]),t._v("、"),_("code",[t._v("HEAD")]),t._v("、"),_("code",[t._v("OPTIONS")]),t._v("、"),_("code",[t._v("TRACE")]),t._v("等没有请求数据实体的查询参数拼接在URL"),_("code",[t._v("?")]),t._v("后面")])]),t._v(" "),_("h2",{attrs:{id:"迭代循环遍历递归"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#迭代循环遍历递归"}},[t._v("#")]),t._v(" 迭代循环遍历递归")]),t._v(" "),_("ul",[_("li",[t._v("循环（loop），指的是在满足条件的情况下，重复执行同一段代码。比如，while语句。\n"),_("ul",[_("li",[t._v("循环则即能对应集合，列表，数组等，也能对执行代码进行操作。")])])]),t._v(" "),_("li",[t._v("迭代（iterate），指的是按照某种顺序逐个访问列表中的每一项。比如，for语句。\n"),_("ul",[_("li",[t._v("迭代只能对应集合，列表，数组等。不能对执行代码进行迭代。")])])]),t._v(" "),_("li",[t._v("遍历（traversal），指的是按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次。\n"),_("ul",[_("li",[t._v("遍历同迭代一样，也不能对执行代码进行遍历。")])])]),t._v(" "),_("li",[t._v("递归（recursion），指的是一个函数不断调用自身的行为。比如，以编程方式输出著名的斐波纳契数列。\n"),_("ul",[_("li",[t._v("线性递归和尾递归。")])])])]),t._v(" "),_("h2",{attrs:{id:"directory和folder区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#directory和folder区别"}},[t._v("#")]),t._v(" directory和folder区别")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("directory")]),t._v(" 目录，简称 "),_("code",[t._v("dir")])]),t._v(" "),_("li",[_("code",[t._v("folder")]),t._v(" 文件夹")])]),t._v(" "),_("blockquote",[_("p",[t._v("两者一般情况下是可以相互通用的，都表示文件夹的意思；但是细细纠来，还是有区别的：")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v('Hi, please go to D:\\files\\images\\directory, and then double click and open folder "travelImg".')])])]),t._v(" "),_("ul",[_("li",[t._v("看完上面那句话，相信大家有点知道意思了：")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("directory")]),t._v(" 也是一个"),_("code",[t._v("folder")]),t._v("，但是我们在说一个"),_("code",[t._v("directory")]),t._v("的时候，通常指它含有"),_("code",[t._v("路径")]),t._v("的意思在里面；")])]),t._v(" "),_("blockquote",[_("p",[_("code",[t._v("folder")]),t._v(" 一般情况，是说某一个文件夹，通常不包含"),_("code",[t._v("路径")]),t._v("的意思，比如：双击这个文件夹，在里面找找看。")])]),t._v(" "),_("h2",{attrs:{id:"多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[t._v("#")]),t._v(" 多线程")]),t._v(" "),_("p",[t._v("并发、并行、同步、异步、多线程、协程的区别")]),t._v(" "),_("blockquote",[_("p",[t._v("对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元。无论进程还是线程，都是由操作系统所管理的。")])]),t._v(" "),_("blockquote",[_("p",[t._v("协程(Coroutine)编译器级的，进程(Process)和线程(Thread)操作系统级的，"),_("code",[t._v("Process")]),t._v(" -> "),_("code",[t._v("Thread")]),t._v(" -> "),_("code",[t._v("Coroutine")])])]),t._v(" "),_("ul",[_("li",[t._v("并发")])]),t._v(" "),_("blockquote",[_("p",[t._v("同一时间段有几个程序都处于已经启动到运行完毕之间，并且这几个程序都在同一个处理机上运行，并发的两种关系是同步和互斥；")])]),t._v(" "),_("ul",[_("li",[t._v("互斥")])]),t._v(" "),_("blockquote",[_("p",[t._v("进程之间访问临界资源时相互排斥的现象；")])]),t._v(" "),_("ul",[_("li",[t._v("同步")])]),t._v(" "),_("blockquote",[_("p",[t._v("进程之间存在依赖关系，一个进程结束的输出作为另一个进程的输入。具有同步关系的一组并发进程之间发送的信息称为消息或者事件；")])]),t._v(" "),_("ul",[_("li",[t._v("并行")])]),t._v(" "),_("blockquote",[_("p",[t._v("单处理器中进程被交替执行，表现出一种并发的外部特征；在多处理器中，进程可以交替执行，还能重叠执行，\n实现并行处理，并行就是同事发生的多个并发事件，具有并发的含义，但并发不一定是并行，也就是说事件之间不一定要同一时刻发生；")])]),t._v(" "),_("ul",[_("li",[t._v("多线程")])]),t._v(" "),_("blockquote",[_("p",[t._v("多线程是进程中并发运行的一段代码，能够实现线程之间的切换执行；")])]),t._v(" "),_("ul",[_("li",[t._v("异步")])]),t._v(" "),_("blockquote",[_("p",[t._v("和同步相对，同步是顺序执行，而异步是彼此独立，在等待某个事件的过程中继续做自己的事，不要等待这一事件完成后再工作。\n线程是实现异步的一个方式，异步是让调用方法的主线程不需要同步等待另一个线程的完成，从而让主线程干其他事情。")])]),t._v(" "),_("ul",[_("li",[t._v("异步和多线程")])]),t._v(" "),_("blockquote",[_("p",[t._v("不是同等关系，异步是目的，多线程只是实现异步的一个手段，实现异步可以采用多线程技术或者交给其他进程来处理")])]),t._v(" "),_("ul",[_("li",[t._v("协程")])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.jianshu.com/p/2782f8c49b2a",target:"_blank",rel:"noopener noreferrer"}},[t._v("coroutine协程详解"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/alibaba/coobjc/blob/master/README_cn.md#0x2-%E5%8D%8F%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("协程"),_("OutboundLink")],1)]),t._v(" "),_("blockquote",[_("p",[t._v("协程，又称微线程，纤程。协程（Coroutine）是一种轻量级的用户态线程，实现的是非抢占式的调度，即由当前协程切换到其他协程由当前协程来控制。\n协程本身可以做在用户态，每个协程的体积比线程要小得多，因此一个进程可以容纳数量相当可观的协程")])]),t._v(" "),_("ul",[_("li",[t._v("信号量")])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://blog.csdn.net/gatieme/article/details/50994533",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程间通信之-信号量semaphore"),_("OutboundLink")],1)]),t._v(" "),_("blockquote",[_("p",[t._v("信号量的使用主要是用来保护共享资源，使得资源在一个时刻只有一个进程（线程）所拥有。")])]),t._v(" "),_("blockquote",[_("p",[t._v("信号量的值为正的时候，说明它空闲。所测试的线程可以锁定而使用它。若为0，说明它被占用，测试的线程要进入睡眠队列中，等待被唤醒。")])]),t._v(" "),_("p",[_("strong",[t._v("上下文切换")])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.jianshu.com/p/6dde7f92951e",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是进程、线程、协程"),_("OutboundLink")],1)]),t._v(" "),_("blockquote",[_("p",[t._v("进程的切换者是操作系统，切换时机是根据操作系统自己的切换策略，用户是无感知的。\n进程的切换内容包括页全局目录、内核栈、硬件上下文，切换内容保存在内存中。进程切换过程是由“用户态到内核态到用户态”的方式，切换效率低。")])]),t._v(" "),_("blockquote",[_("p",[t._v("线程的切换者是操作系统，切换时机是根据操作系统自己的切换策略，用户无感知。\n线程的切换内容包括内核栈和硬件上下文。线程切换内容保存在内核栈中。线程切换过程是由“用户态到内核态到用户态”， 切换效率中等。")])]),t._v(" "),_("blockquote",[_("p",[t._v("协程的切换者是用户（编程者或应用程序），切换时机是用户自己的程序所决定的。\n协程的切换内容是硬件上下文，切换内存保存在用户自己的变量（用户栈或堆）中。协程的切换过程只有用户态，即没有陷入内核态，因此切换效率高。")])]),t._v(" "),_("blockquote",[_("p",[t._v("多线程并不一定是要在多核处理器才支持的，就算是单核也是可以支持多线程的。")]),t._v(" "),_("p",[t._v("CPU 通过给每个线程分配一定的时间片，由于时间非常短通常是几十毫秒，所以 CPU 可以不停的切换线程执行任务从而达到了多线程的效果。")]),t._v(" "),_("p",[t._v("但是由于在线程切换的时候需要保存本次执行的信息，在该线程被 CPU 剥夺时间片后又再次运行恢复上次所保存的信息的过程就称为上下文切换。")])]),t._v(" "),_("ul",[_("li",[t._v("上下文切换是非常耗效率的。通常有以下解决方案:")])]),t._v(" "),_("ol",[_("li",[t._v("采用无锁编程，比如将数据按照 "),_("code",[t._v("Hash(id)")]),t._v(" 进行取模分段，每个线程处理各自分段的数据，从而避免使用锁。")]),t._v(" "),_("li",[t._v("采用 CAS(compare and swap) 算法，如 "),_("code",[t._v("Atomic")]),t._v(" 包就是采用 CAS 算法。")]),t._v(" "),_("li",[t._v("合理的创建线程，避免创建了一些线程但其中大部分都是处于 "),_("code",[t._v("waiting")]),t._v(" 状态，因为每当从 "),_("code",[t._v("waiting")]),t._v(" 状态切换到 "),_("code",[t._v("running")]),t._v(" 状态都是一次上下文切换。")])]),t._v(" "),_("h3",{attrs:{id:"线程数量控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程数量控制"}},[t._v("#")]),t._v(" 线程数量控制")]),t._v(" "),_("ul",[_("li",[t._v("IO密集型")])]),t._v(" "),_("blockquote",[_("p",[t._v("线程数 = CPU核心数/(1-阻塞系数)")])]),t._v(" "),_("blockquote",[_("p",[t._v("Blocking Coefficient(阻塞系数)（一般为0.8~0.9之间） = 阻塞时间/(阻塞时间+使用CPU的时间)")])]),t._v(" "),_("ul",[_("li",[t._v("计算密集型")])]),t._v(" "),_("blockquote",[_("p",[t._v("CPU有超线程：线程数 = CPU内核线程数*2")]),t._v(" "),_("p",[t._v("CPU无超线程：线程数 = CPU核数+1")])]),t._v(" "),_("h2",{attrs:{id:"缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/26190832",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cache 和 Buffer 都是缓存，主要区别是什么？"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/mlgjb/p/7991903.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓冲区(buffer)与缓存(cache)"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://blog.csdn.net/dangkun321/article/details/107161248",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓冲和缓存"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/d00348a9eb3b",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓存穿透、缓存击穿和缓存雪崩实践"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[t._v("缓存穿透")])]),t._v(" "),_("blockquote",[_("p",[t._v("在高并发下，查询一个不存在的值时，缓存不会被命中，导致大量请求直接落到数据库上，如活动系统里面查询一个不存在的活动。")])]),t._v(" "),_("ul",[_("li",[t._v("缓存击穿")])]),t._v(" "),_("blockquote",[_("p",[t._v("在高并发下，对一个特定的值进行查询，但是这个时候缓存正好过期了，缓存没有命中，导致大量请求直接落到数据库上，如活动系统里面查询活动信息，但是在活动进行过程中活动缓存突然过期了。")])]),t._v(" "),_("ul",[_("li",[t._v("缓存雪崩")])]),t._v(" "),_("blockquote",[_("p",[t._v("在高并发下，大量的缓存key在同一时间失效，导致大量的请求落到数据库上，如活动系统里面同时进行着非常多的活动，但是在某个时间点所有的活动缓存全部过期。")])]),t._v(" "),_("ul",[_("li",[t._v("缓存命中率")])]),t._v(" "),_("blockquote",[_("p",[t._v("命中：直接从缓存中读取到想要的数据。")]),t._v(" "),_("p",[t._v("不命中：缓存中没有想要的数据，还需要到数据库进行一次查询才能读取到想要的数据。")])]),t._v(" "),_("ul",[_("li",[t._v("缓存丢失")])]),t._v(" "),_("p",[_("strong",[t._v("常见解决方案")])]),t._v(" "),_("ul",[_("li",[t._v("直接缓存NULL值（时间不能过长，防止影响正常值）")]),t._v(" "),_("li",[t._v("过滤器（如白名单，符合某种规则等）")]),t._v(" "),_("li",[t._v("限流")]),t._v(" "),_("li",[t._v("缓存预热")]),t._v(" "),_("li",[t._v("分级缓存")]),t._v(" "),_("li",[t._v("缓存永远不过期")])]),t._v(" "),_("p",[_("strong",[t._v("常见算法")])]),t._v(" "),_("ol",[_("li",[t._v("Least Frequently Used (LFU)")]),t._v(" "),_("li",[t._v("Least Recently Used (LRU)")]),t._v(" "),_("li",[t._v("Least Recently Used2 (LRU2)")]),t._v(" "),_("li",[t._v("Two Queue (2Q)")])]),t._v(" "),_("h2",{attrs:{id:"锁和事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#锁和事务"}},[t._v("#")]),t._v(" 锁和事务")]),t._v(" "),_("p",[_("strong",[t._v("锁")])]),t._v(" "),_("blockquote",[_("p",[t._v("单进程的系统中，存在多线程同时操作一个公共变量，此时需要加锁对变量进行同步操作，保证多线程的操作线性执行消除并发修改。\n解决的是单进程中的多线程并发问题。")])]),t._v(" "),_("p",[_("strong",[t._v("分布式锁")])]),t._v(" "),_("blockquote",[_("p",[t._v("只要的应用场景是在集群模式的多个相同服务，可能会部署在不同机器上，解决进程间安全问题，防止多进程同时操作一个变量或者数据库。\n解决的是多进程的并发问题。")])]),t._v(" "),_("p",[_("strong",[t._v("事务")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/73beee3c70e9",target:"_blank",rel:"noopener noreferrer"}},[t._v("事物概念"),_("OutboundLink")],1)])]),t._v(" "),_("blockquote",[_("p",[t._v("解决一个会话过程中，上下文的修改对所有数据库表的操作要么全部成功，要不全部失败。所以应用在service层。\n解决的是一个会话中的操作的数据一致性。")])]),t._v(" "),_("p",[_("strong",[t._v("分布式事务")])]),t._v(" "),_("blockquote",[_("p",[t._v("解决一个联动操作，比如一个商品的买卖分为:（1）添加商品到购物车，（2）修改商品库存-1；\n此时购物车服务和商品库存服务可能部署在两台电脑，这时候需要保证对两个服务的操作都全部成功或者全部回退。\n解决的是组合服务的数据操作的一致性问题。")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/lijingshanxi/p/9943836.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单聊聊事务补偿机制"),_("OutboundLink")],1)])]),t._v(" "),_("h2",{attrs:{id:"http授权认证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http授权认证"}},[t._v("#")]),t._v(" HTTP授权认证")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/li1992/articles/9802716.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web开发几种常用的认证机制"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[t._v("SSO ：单点登录（Single sign-on）是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。")]),t._v(" "),_("li",[t._v("CAS ：中央认证服务（Central Authentication Service），一个基于Kerberos票据方式实现SSO单点登录的框架，\n为Web 应用系统提供一种可靠的单点登录解决方法（属于 Web SSO ）")])]),t._v(" "),_("blockquote",[_("p",[t._v("Basic Auth：这种认证直接顺应HTTP协议的无状态性，每次执行业务的时候，将username与password参数发送给服务器进行验证")])]),t._v(" "),_("blockquote",[_("p",[t._v("Session：是指在客户端Cookie中存储一个Session Id。请求时携带Session Id，服务器从Session数据存储中找到对应的Session。\nNative App一般是不直接支持Cookie机制")])]),t._v(" "),_("h3",{attrs:{id:"oauth2和jwt区别与联系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oauth2和jwt区别与联系"}},[t._v("#")]),t._v(" OAuth2和JWT区别与联系")]),t._v(" "),_("p",[_("strong",[t._v("JWT是一种认证协议")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://jwt.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://jwt.io"),_("OutboundLink")],1)])]),t._v(" "),_("blockquote",[_("p",[t._v("JWT（Json web token）提供了一种用于发布接入令牌（Access Token),并对发布的签名接入令牌进行验证的方法。\n令牌（Token）本身包含了一系列声明，应用程序可以根据这些声明限制用户对资源的访问。")])]),t._v(" "),_("blockquote",[_("p",[t._v("应用场景：JWT是用在前后端分离, 需要简单的对后台API进行保护时使用.(前后端分离无session, 频繁传用户密码不安全)")])]),t._v(" "),_("p",[_("strong",[t._v("OAuth2是一种授权框架")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://tools.ietf.org/html/rfc6749",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tools.ietf.org/html/rfc6749"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰 – 理解 OAuth 2.0"),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:""}},[t._v("OAuth2 CSRF攻击")])])]),t._v(" "),_("blockquote",[_("p",[t._v("OAuth2是一种授权框架，提供了一套详细的授权机制（指导）。用户或应用可以通过公开的或私有的设置，授权第三方应用访问特定资源。")])]),t._v(" "),_("blockquote",[_("p",[t._v("应用场景：OAuth2用在使用第三方账号登录的情况(比如使用weibo, qq, github登录某个app)")])]),t._v(" "),_("ul",[_("li",[t._v("OAuth2是一个相对复杂的协议, 有4种授权模式：")])]),t._v(" "),_("ol",[_("li",[t._v("授权码模式（authorization code）")]),t._v(" "),_("li",[t._v("密码模式（resource owner password credentials）")]),t._v(" "),_("li",[t._v("客户端模式（client credentials）")]),t._v(" "),_("li",[t._v("简化模式（implicit）")])]),t._v(" "),_("h2",{attrs:{id:"加密哈希"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加密哈希"}},[t._v("#")]),t._v(" 加密哈希")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/xjnotxj/p/12716981.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("密码哈希（Password Hash）"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("HElib是实现同态加密（HE）的开源软件库 "),_("a",{attrs:{href:"https://github.com/homenc/HElib",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/homenc/HElib"),_("OutboundLink")],1)])]),t._v(" "),_("p",[_("strong",[t._v("哈希（散列）函数")])]),t._v(" "),_("ul",[_("li",[t._v("不推荐：RC4, MD4, MD5, SHA-0, SHA-1, DES, 2DES 等")]),t._v(" "),_("li",[t._v("推荐：SHA-2(SHA-256, SHA-384, SHA-512)、SHA-3、Blake2 等")]),t._v(" "),_("li",[t._v("密码哈希函数（Password Hash）：PBKDF2, Bcrypt, Scrypt, Argon2")])]),t._v(" "),_("p",[_("strong",[t._v("应对普通哈希容易被破解的策略")])]),t._v(" "),_("ul",[_("li",[t._v("加盐（salt）")])]),t._v(" "),_("blockquote",[_("p",[t._v("加盐就是对目标字段哈希前，拼接上另一个字段（salt）。注：盐值加到字段之前较为普遍。加盐对防彩虹表很有效。")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("慢哈希")])]),t._v(" "),_("li",[_("p",[t._v("Base64")])])]),t._v(" "),_("blockquote",[_("p",[t._v("Base64是一种能将任意Binary资料用64种字元组合成字串的方法，而Binary资料和字串资料彼此之间可以互相转换。\n在实际应用中，Base64除了能将Binary资料可视化之外，也常用来表示字串加密过后的内容")])]),t._v(" "),_("h2",{attrs:{id:"cicd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cicd"}},[t._v("#")]),t._v(" CICD")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://linux.cn/article-9926-1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("技术|什么是 CI/CD？"),_("OutboundLink")],1)])]),t._v(" "),_("ul",[_("li",[t._v("CI全名Continuous Integration 持续集成概念")]),t._v(" "),_("li",[t._v("CD全名是Continuous Deployment，是持续部署")]),t._v(" "),_("li",[t._v("CD Continuous delivery，交持续交付")])]),t._v(" "),_("blockquote",[_("p",[t._v("CI/CD优点是，重复的工作用自动化来代替、减少时间成本、版本发布时间减短了。\n当开发每天会提交多次代码到主干上，会做一些重复性的动作时，就可以用持续集成环境来操作。")])])])}),[],!1,null,null,null);e.default=v.exports}}]);