(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{669:function(t,e,n){"use strict";n.r(e);var r=n(4),o=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#flag"}},[t._v("Flag")])]),n("li",[n("a",{attrs:{href:"#location"}},[t._v("location")]),n("ul",[n("li",[n("a",{attrs:{href:"#语法规则"}},[t._v("语法规则")])]),n("li",[n("a",{attrs:{href:"#内部调用"}},[t._v("内部调用")])]),n("li",[n("a",{attrs:{href:"#以后缀设置过期时间"}},[t._v("以后缀设置过期时间")])]),n("li",[n("a",{attrs:{href:"#禁止访问某个目录"}},[t._v("禁止访问某个目录")])])])]),n("li",[n("a",{attrs:{href:"#rewrite语法"}},[t._v("rewrite语法")])]),n("li",[n("a",{attrs:{href:"#判断表达式"}},[t._v("判断表达式")])]),n("li",[n("a",{attrs:{href:"#全局变量"}},[t._v("全局变量")])]),n("li",[n("a",{attrs:{href:"#判断user-agent"}},[t._v("判断user_agent")])]),n("li",[n("a",{attrs:{href:"#proxy-pass指令"}},[t._v("proxy_pass指令")])]),n("li",[n("a",{attrs:{href:"#日志切割"}},[t._v("日志切割")])]),n("li",[n("a",{attrs:{href:"#主配置"}},[t._v("主配置")])]),n("li",[n("a",{attrs:{href:"#动静分离配置"}},[t._v("动静分离配置")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"flag"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flag"}},[t._v("#")]),t._v(" Flag")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/nginx"),n("OutboundLink")],1),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://nginx.org/en/download.html"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://nginx.org/en/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://nginx.org/en/docs"),n("OutboundLink")],1)])])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/nginxinc",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/nginxinc"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.nginx.com/nginx-wiki/build/dirhtml/modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.nginx.com/nginx-wiki/build/dirhtml/modules"),n("OutboundLink")],1),t._v(" "),n("ul",[n("li",[t._v("NGINX多种扩展模块 "),n("a",{attrs:{href:"https://github.com/openresty",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/openresty"),n("OutboundLink")],1)])])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/h5bp/server-configs-nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/h5bp/server-configs-nginx"),n("OutboundLink")],1)])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://my.oschina.net/jsan/blog/125861",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx HTTP核心模块指令和内置变量中文说明"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vasilevich/nginxbeautifier",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginxbeautifier"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/1connect/nginx-config-formatter",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx-config-formatter"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/0xB4LINT/nginxconfig.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginxconfig配置生成"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/u014296316/article/details/80973530",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx 变量使用"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5ea931866fb9a043815146fb",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx 从入门到实践，万字详解"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("Nginx 入门指南 "),n("a",{attrs:{href:"https://github.com/xuexb/learn-nginx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/xuexb/learn-nginx"),n("OutboundLink")],1)])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://jayshao.com/cloudflare-nginx-ssl",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客使用Cloudflare和Nginx的相关配置"),n("OutboundLink")],1)])]),t._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"https://jaminzhang.github.io/lb/HAProxy-Get-Started",target:"_blank",rel:"noopener noreferrer"}},[t._v("HAProxy 入门"),n("OutboundLink")],1)])]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://www.zhihu.com/question/34489042/answers/updated",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx和HAProxy对比"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://www.lgoon.com/detail/22",target:"_blank",rel:"noopener noreferrer"}},[t._v("HAProxy Nginx LVS 对比"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://vimll.com/?p=886",target:"_blank",rel:"noopener noreferrer"}},[t._v("负载均衡器对比(LVS、Nginx、Haproxy)"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000018838988",target:"_blank",rel:"noopener noreferrer"}},[t._v("各大API网关性能比较"),n("OutboundLink")],1)])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/caddyserver/caddy",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/caddyserver/caddy"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"location"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#location"}},[t._v("#")]),t._v(" location")]),t._v(" "),n("h3",{attrs:{id:"语法规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法规则"}},[t._v("#")]),t._v(" 语法规则")]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location [=|~|~*|^~] /uri/ {\n        ····· \n}\n")])])]),n("ul",[n("li",[t._v("修饰符含义")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("规则")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("!~*")])]),t._v(" "),n("td",[t._v("不区分大小写，但不匹配的正则")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("!~")])]),t._v(" "),n("td",[t._v("区分大小写，但不匹配的正则")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("/")])]),t._v(" "),n("td",[t._v("通用匹配，任何请求都会匹配到")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("@")])]),t._v(" "),n("td",[t._v("定义一个内部命名的匹配（"),n("a",{attrs:{href:"https://blog.sometimesnaive.org/article/72",target:"_blank",rel:"noopener noreferrer"}},[t._v("等阶于"),n("code",[t._v("internal")]),n("OutboundLink")],1),t._v("），适用于"),n("code",[t._v("error_page")]),t._v(","),n("code",[t._v("try_files")])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("^~")])]),t._v(" "),n("td",[t._v("uri以某个常规字符串开头，如请求为"),n("code",[t._v("/static/20%/aa")]),t._v("，匹配规则"),n("code",[t._v("^~ /static/ /aa")])])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("~*")])]),t._v(" "),n("td",[t._v("不区分大小写的正则匹配")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("~")])]),t._v(" "),n("td",[t._v("区分大小写的正则匹配")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("=")])]),t._v(" "),n("td",[t._v("精确匹配")])])])]),t._v(" "),n("ul",[n("li",[t._v("当我们有多个"),n("code",[t._v("location")]),t._v("配置的情况下，其匹配顺序为")])]),t._v(" "),n("ol",[n("li",[t._v("带有"),n("code",[t._v("=")]),t._v("的精确匹配优先")]),t._v(" "),n("li",[t._v("没有修饰符的精确匹配")]),t._v(" "),n("li",[t._v("正则表达式按照他们在配置文件中定义的顺序")]),t._v(" "),n("li",[t._v("带有"),n("code",[t._v("^~")]),t._v("修饰符的，开头匹配")]),t._v(" "),n("li",[t._v("带有"),n("code",[t._v("~")]),t._v("、"),n("code",[t._v("~*")]),t._v("修饰符的，如果正则表达式与"),n("code",[t._v("URI")]),t._v("匹配")]),t._v(" "),n("li",[t._v("没有修饰符的，如果指定字符串与"),n("code",[t._v("URI")]),t._v("开头匹配")])]),t._v(" "),n("p",[n("strong",[t._v("示例")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。\n# 这里是直接转发给后端应用服务器了，也可以是一个静态首页\nlocation = / {\n   #匹配http://localhost/\n}\nlocation = /login {\n   #匹配http://localhost/login\n}\n# 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项\n# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用\nlocation ^~ /static/ {\n   #匹配http://localhost/static/a.html，http://localhost/static/c.png\n}\nlocation ~ \\.(gif|jpg|png|js|css)$ {\n   #匹配http://localhost/a.gif, http://localhost/b.jpg\n}\nlocation ~* \\.png$ {\n   #http://localhost/a.PNG\n}\nlocation !~ \\.xhtml$ {\n   #匹配http://localhost/a.XHTML\n}\nlocation !~* \\.xhtml$ {\n   #匹配http://localhost/a.jsp\n}\n# 通用规则，用来转发动态请求到后端应用服务器\n# 非静态文件请求就默认是动态请求\nlocation / {\n   #匹配http://localhost/register，http://localhost/category/id/1111\n}\n")])])]),n("h3",{attrs:{id:"内部调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部调用"}},[t._v("#")]),t._v(" 内部调用")]),t._v(" "),n("p",[n("strong",[n("code",[t._v("internal")])])]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("internal")]),t._v(" 指令用于指定只允许来自本地 "),n("code",[t._v("Nginx")]),t._v(" 的内部调用，来自外部的访问会直接返回 "),n("code",[t._v("404 not found")]),t._v(" 状态。")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 定义一个内部调用location\nlocation /internal/ {\n    internal;\n    proxy_pass http://192.168.1.110:8091;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    # 解决https->nginx->http->tomcat重定向问题\n    proxy_redirect ~^http://([^:]+)(:\\d+)?(.*)$ https://$1$3;\n}\n# 使用rewrite 内部重定向，其中 last 或 break 均可提供内部重定向。\nlocation / {\n    rewrite .* /internal/ last;\n}\n# 利用 Openresty 的 ngx.exec 模块\nlocation / {\n    access_by_lua_block {\n        return ngx.exec("/internal/")\n    }\n}\n')])])]),n("p",[n("strong",[n("code",[t._v("location @name")])])]),t._v(" "),n("blockquote",[n("p",[t._v("命名location中不能再嵌套其它的命名location。")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 匹配静态文件\nlocation ~ .*\\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {\n    # 如果文件不存在\n    #if (!-f $request_filename) {\n        #content_by_lua_block {\n                #ngx.exec("@pass");\n        #}\n    #}\n    root /www/wwwroot/api;\n    # 按顺序检查文件是否存在，返回第一个找到的文件。结尾的斜线表示为文件夹 -$uri/。\n    # 如果所有的文件都找不到，会进行一个内部重定向到最后一个参数\n    try_files $uri $uri/ @pass;\n}\n# 通用匹配\nlocation / {\n    # 或者使用`ngx.exec`主要实现的是内部的重定向\n    # `ngx.redirect`是外部重定向\n    content_by_lua_block {\n        ngx.exec("@pass");\n    }\n}\nlocation @pass {\n    proxy_pass http://192.168.1.110:8091;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    # 解决https->nginx->http->tomcat重定向问题\n    proxy_redirect ~^http://([^:]+)(:\\d+)?(.*)$  https://$1$3;\n}\n')])])]),n("h3",{attrs:{id:"以后缀设置过期时间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#以后缀设置过期时间"}},[t._v("#")]),t._v(" 以后缀设置过期时间")]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~* \\.(js|css|jpg|jpeg|gif|png|swf)$ {\n    if (-f $request_filename) {\n        expires 1h;\n        break;\n    }\n}\n")])])]),n("h3",{attrs:{id:"禁止访问某个目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#禁止访问某个目录"}},[t._v("#")]),t._v(" 禁止访问某个目录")]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~* \\.(txt|doc)${\n    root /data/www/wwwroot/linuxtone/test;\n    deny all;\n}\n")])])]),n("h2",{attrs:{id:"rewrite语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rewrite语法"}},[t._v("#")]),t._v(" rewrite语法")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://blog.csdn.net/weixin_40792878/article/details/83316519",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/weixin_40792878/article/details/83316519"),n("OutboundLink")],1)])]),t._v(" "),n("blockquote",[n("p",[t._v("该指令通过正则表达式的使用来改变URI.可以同时存在一个或者多个指令，按照顺序一次对URL进行匹配和处理。")])]),t._v(" "),n("blockquote",[n("p",[t._v("该指令可以在"),n("code",[t._v("server")]),t._v("块或者"),n("code",[t._v("location")]),t._v("块中配置")])]),t._v(" "),n("ul",[n("li",[t._v("语法："),n("code",[t._v("rewrite regex replacement [flag];")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("rewrite")]),t._v("是实现URL重定向的重要指令。")]),t._v(" "),n("li",[n("code",[t._v("regex")]),t._v("用来匹配URI的正则表达式；")]),t._v(" "),n("li",[n("code",[t._v("replacement")]),t._v('匹配成功后用来替换URI中被截取内容的字符串，默认情况如果该字符串包含“http://”、"https://"开头，则不会继续向下对URI进行其他处理。直接返回重写的URI给客户端')]),t._v(" "),n("li",[n("code",[t._v("flag")]),t._v("用来设置rewrite对URI的处理行为,包含如下数据：")])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("标记符号")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("last")]),t._v(" "),n("td",[t._v("终止在本location块中处理接收到的URI，并将此处重写的URI作为新的URI使用其他location进行处理。（只是终止当前location的处理）")])]),t._v(" "),n("tr",[n("td",[t._v("break")]),t._v(" "),n("td",[t._v("将此处重写的URI作为一个新的URI在当前location中继续执行，并不会将新的URI转向其他location。")])]),t._v(" "),n("tr",[n("td",[t._v("redirect")]),t._v(" "),n("td",[t._v("将重写后的URI返回个客户端，状态码是302，表明临时重定向，主要用在replacement字符串不以“http://”，“ https://”或“ $scheme” 开头；")])]),t._v(" "),n("tr",[n("td",[t._v("permanent")]),t._v(" "),n("td",[t._v("将重写的URI返回客户端，状态码为301,指明是永久重定向；")])])])]),t._v(" "),n("p",[n("strong",[t._v("Redirect")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("rewrite ^(.*) http://example.com$1 redirect;\n")])])]),n("p",[n("strong",[t._v("防盗链")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~* \\.(gif|jpg|swf)$ {\n    valid_referers none blocked start.igrow.cn sta.igrow.cn;\n    if ($invalid_referer) {\n        rewrite ^/ http://$host/logo.png;\n    }\n}\n")])])]),n("h2",{attrs:{id:"判断表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#判断表达式"}},[t._v("#")]),t._v(" 判断表达式")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("表达式")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("-d")]),t._v(" 和 "),n("code",[t._v("!-d")])]),t._v(" "),n("td",[t._v("用来判断是否存在目录")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("-e")]),t._v(" 和 "),n("code",[t._v("!-e")])]),t._v(" "),n("td",[t._v("用来判断是否存在文件或目录")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("-f")]),t._v(" 和 "),n("code",[t._v("!-f")])]),t._v(" "),n("td",[t._v("用来判断是否存在文件")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("-x")]),t._v(" 和 "),n("code",[t._v("!-x")])]),t._v(" "),n("td",[t._v("用来判断文件是否可执行")])])])]),t._v(" "),n("h2",{attrs:{id:"全局变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),n("p",[n("strong",[t._v("常见变量")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("$arg_名称")])]),t._v(" "),n("td",[t._v("URL 中某个具体参数的值")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$args")])]),t._v(" "),n("td",[t._v("这个变量等于请求行中(GET请求)的参数，同$query_string")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$body_bytes_sent")])]),t._v(" "),n("td",[t._v('传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的"%B"参数保持兼容')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$bytes_sent")])]),t._v(" "),n("td",[t._v("传输给客户端的字节数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$content_length")])]),t._v(" "),n("td",[t._v("HTTP 请求中标识包体长度的Content-Length头部的值，头部没有这个则为空")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$content_type")])]),t._v(" "),n("td",[t._v("标识请求包体类型的Content-Type 头部的值")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$cookie_名称")])]),t._v(" "),n("td",[t._v('客户端请求Header头中的cookie变量，前缀"$cookie_"加上cookie名称的变量，该变量的值即为cookie名称的值')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$document_root")])]),t._v(" "),n("td",[t._v("当前请求在root指令中指定的值。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$document_uri")])]),t._v(" "),n("td",[t._v("与uri完全相同")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$host")])]),t._v(" "),n("td",[t._v("请求主机头字段，否则为服务器名称。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_cookie")])]),t._v(" "),n("td",[t._v("客户端cookie信息")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_host")])]),t._v(" "),n("td",[t._v("请求地址，即浏览器中你输入的地址（IP或域名）")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_referer")])]),t._v(" "),n("td",[t._v("url跳转来源,用来记录从那个页面链接访问过来的")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_user_agent")])]),t._v(" "),n("td",[t._v("客户端agent信息")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_x_forwarded_for")])]),t._v(" "),n("td",[t._v("当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$http_名称")])]),t._v(" "),n("td",[t._v('匹配任意请求头字段；变量名中的后半部分名称可以替换成任意请求头字段，如在配置文件中需要获取http请求头："Accept-Language"，$http_accept_language即可')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$https")])]),t._v(" "),n("td",[t._v('如果开启了SSL安全模式，值为"on"，否则为空字符串。')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$is_args")])]),t._v(" "),n("td",[t._v('如果已经设置$args，则该变量的值为"？"，否则为""。')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$limit_rate")])]),t._v(" "),n("td",[t._v("这个变量可以限制连接速率。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$pipe")])]),t._v(" "),n("td",[t._v('如果请求来自管道通信，值为"p"，否则为"."')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$query_string")])]),t._v(" "),n("td",[t._v("与args变量完全相同")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$realpath_root")])]),t._v(" "),n("td",[t._v("当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$remote_user")])]),t._v(" "),n("td",[t._v("有HTTP Basic Authentication 协议传入的用户名，已经经过Auth Basic Module验证的用户名。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_body_file")])]),t._v(" "),n("td",[t._v("客户端请求主体信息的临时文件名。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_body")])]),t._v(" "),n("td",[t._v("客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_filename")])]),t._v(" "),n("td",[t._v("当前请求的文件路径，由root或alias指令与URI请求生成。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_length")])]),t._v(" "),n("td",[t._v("所有请求内容的大小，包括请求行，头部，包体等")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_method")])]),t._v(" "),n("td",[t._v("客户端请求的动作，通常为GET或POST。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_uri")])]),t._v(" "),n("td",[t._v('包含请求参数的原始URI，不包含主机名，如："/?dir=DeveloperTool"。')])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request")])]),t._v(" "),n("td",[t._v("原始的url请求，含有方法和协议版本")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$scheme")])]),t._v(" "),n("td",[t._v("HTTP协议 HTTP 或者 HTTPS")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$sent_http_名称")])]),t._v(" "),n("td",[t._v("可以设置任意http响应头字段；变量名中的后半部分名称可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$status")])]),t._v(" "),n("td",[t._v("HTTP响应代码")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$uri")])]),t._v(" "),n("td",[t._v("请求的URI，不包含主机名，不包含?后的参数")])])])]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("$request_body_file")]),t._v(" 将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要执意开启此功能，\n需要设置"),n("code",[t._v("client_body_in_file_only")]),t._v("。如果将次文件传递给后端的代理服务器，需要禁用"),n("code",[t._v("request body")]),t._v("，\n即设置"),n("code",[t._v("proxy_pass_request_body off")]),t._v("，"),n("code",[t._v("fastcgi_pass_request_body off")]),t._v("，\n"),n("code",[t._v("uwsgi_pass_request_body off")]),t._v("，"),n("code",[t._v("scgi_pass_request_body off")])])]),t._v(" "),n("p",[n("strong",[t._v("TCP相关变量")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("$binary_remote_addr")])]),t._v(" "),n("td",[t._v("客户端地质的整型格式，对于IPv4是4字节")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$connection_requests")])]),t._v(" "),n("td",[t._v("当前连接上执行过的请求数，对keepalive 有意义")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$connection")])]),t._v(" "),n("td",[t._v("递增的连接序号")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$proxy_protocol_addr")])]),t._v(" "),n("td",[t._v("若使用了proxy_protocol 协议则返回协议中的地址")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$proxy_protocol_port")])]),t._v(" "),n("td",[t._v("若使用了proxy_protocol 协议则返回协议中的端口")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$remote_addr")])]),t._v(" "),n("td",[t._v("客户端地址")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$remote_port")])]),t._v(" "),n("td",[t._v("客户端端口")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$server_addr")])]),t._v(" "),n("td",[t._v("服务器端地址(本端地址)，在完成一次系统调用后可以确定这个值。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$server_port")])]),t._v(" "),n("td",[t._v("请求到达服务器的端口号。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$server_protocol")])]),t._v(" "),n("td",[t._v("请求使用的协议，通常是HTTP/1.0或HTTP/1.1。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$TCP_INFO")])]),t._v(" "),n("td",[t._v("tcp内核层参数（$tcpinfo_rtt,$tcpinfo_rttvar,$tcpinfo_snd_cwnd,$tcpinfo_rcv_space）")])])])]),t._v(" "),n("p",[n("strong",[t._v("处理请求过程中产生的变量")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("$request_completion")])]),t._v(" "),n("td",[t._v("若请求处理完则返回OK，否则为空")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_id")])]),t._v(" "),n("td",[t._v("以16禁止输出的请求标识id，随即生成")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$request_time")])]),t._v(" "),n("td",[t._v("请求处理到现在的耗时")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$server_name")])]),t._v(" "),n("td",[t._v("匹配上的请求server_name")])])])]),t._v(" "),n("p",[n("strong",[t._v("系统变量")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("作用")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("$hostname")])]),t._v(" "),n("td",[t._v("与系统上输出hostname 一致")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$pid")])]),t._v(" "),n("td",[t._v("所属worker进程的id")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$time_local")])]),t._v(" "),n("td",[t._v("以本地时间的标准输出")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$time_iso8601")])]),t._v(" "),n("td",[t._v("服务器时间的ISO 8610格式")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$msec")])]),t._v(" "),n("td",[t._v("当前的Unix时间戳")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("$nginx_version")])]),t._v(" "),n("td",[t._v("nginx版本")])])])]),t._v(" "),n("h2",{attrs:{id:"判断user-agent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#判断user-agent"}},[t._v("#")]),t._v(" 判断user_agent")]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 设置变量\nset $mobile_user_agent "(MIDP)|(WAP)|(UP.Browser)|(Smartphone)\n|(Obigo)|(Mobile)|(AU.Browser)|(wxd.Mms)|(WxdB.Browser)|(CLDC)\n|(UP.Link)|(KM.Browser)|(UCWEB)|(SEMC-Browser)|(Mini)|(Symbian)\n|(Palm)|(Nokia)|(Panasonic)|(MOT-)|(SonyEricsson)|(NEC-)|(Alcatel)\n|(Ericsson)|(BENQ)|(BenQ)|(Amoisonic)|(Amoi-)|(Capitel)|(PHILIPS)\n|(SAMSUNG)|(Lenovo)|(Mitsu)|(Motorola)|(SHARP)|(WAPPER)|(LG-)\n|(LG/)|(EG900)|(CECT)|(Compal)|(kejian)|(Bird)|(BIRD)|(G900/V1.0)\n|(Arima)|(CTL)|(TDG)|(Daxian)|(DAXIAN)|(DBTEL)|(Eastcom)|(EASTCOM)\n|(PANTECH)|(Dopod)|(Haier)|(HAIER)|(KONKA)|(KEJIAN)|(LENOVO)\n|(Soutec)|(SOUTEC)|(SAGEM)|(SEC-)|(SED-)|(EMOL-)|(INNO55)\n|(ZTE)|(iPhone)|(Android)|(Windows CE)|(Wget)|(Java)|(curl)|(Opera)";\n\n# 判断是否为移动端访问\nif ( $http_user_agent ~ "$mobile_user_agent" ) {\n    # 重写URI作为一个新的URI在当前location中继续执行。\n    # 目的是在if块中proxy_pass不能带URI\n    rewrite ^ /URI参数$1 break;\n    proxy_pass https://127.0.0.1;\n    #proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header REMOTE-HOST $remote_addr;\n}\n')])])]),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# cloudflare 默认会在header里面加上’HTTP_CF_IPCOUNTRY’\n# 禁止某些国家, user agent 的访问，配置在http（全局）\nmap $http_cf_ipcountry $allow {\n    default yes;\n    US no;\n    CA no;\n    UK no;\n    AU no;\n}\n# 在server或location中配置\nif ($allow = no) {\n    return 403;\n}\n")])])]),n("h2",{attrs:{id:"proxy-pass指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proxy-pass指令"}},[t._v("#")]),t._v(" proxy_pass指令")]),t._v(" "),n("blockquote",[n("p",[t._v("nginx无法在"),n("code",[t._v("proxy_pass")]),t._v("指令中处理所需的URI部分，因为位于指定的位置（因此是错误消息）。\n这是因为nginx是以模块化的方式构建的，每个配置块都是由各个模块在各个阶段读取的。")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("proxy_pass")]),t._v("在以下情况下，指令中不能有URI ：\n"),n("ul",[n("li",[t._v("正则表达式位置")]),t._v(" "),n("li",[t._v("命名的地点")]),t._v(" "),n("li",[t._v("if 块")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("解决方案可见"),n("a",{attrs:{href:"#%E5%88%A4%E6%96%ADuser-agent"}},[t._v("判断"),n("code",[t._v("user_agent")])])])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("proxy_set_header")]),t._v(" 设置请求头信息给上游服务器")]),t._v(" "),n("li",[n("code",[t._v("add_header")]),t._v(" 设置响应头信息给浏览器")])]),t._v(" "),n("h2",{attrs:{id:"日志切割"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#日志切割"}},[t._v("#")]),t._v(" 日志切割")]),t._v(" "),n("blockquote",[n("p",[t._v("在"),n("code",[t._v("nginx.conf")]),t._v("中配置"),n("code",[t._v("log_format")]),t._v("（可以配置在"),n("code",[t._v("server")]),t._v("中），含义是配置了一个名为"),n("code",[t._v("main")]),t._v("的日志格式化的规则，应用在了"),n("code",[t._v("access_log")]),t._v("的日志上")])]),t._v(" "),n("p",[n("strong",[t._v("使用到"),n("code",[t._v("timeiso8601")]),t._v("内嵌变量来获取时间配置日志循环")])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/jingsam/jingsam.github.io/blob/source/source/_posts/2019-01-15-nginx-access-log.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单搞定Nginx日志分割"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 可能出现if条件不成立的情况，推荐在http块中使用map\nif ($time_iso8601 ~ \"^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})\") {\n    set $year $1;\n    set $month $2;\n    set $day $3;\n    set $hour $4;\n    set $minutes $5;\n    set $seconds $6;\n}\naccess_log logs/$year-$month-$day-$hour$minutes$seconds-access.log main;\n\n# Perl语法\nif ($time_iso8601 ~ \"^(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})\") {}\naccess_log logs/$year-$month-$day-access.log main;\n\n# http块中不允许使用if，使用map替代\nmap $time_iso8601 $logdate {\n    '~^(?<ymd>\\d{4}-\\d{2}-\\d{2}-\\d{6})'   $ymd;\n    default                               'nodate';\n}\naccess_log logs/access_${logdate}.log;\n")])])]),n("p",[n("strong",[t._v("日志归档程序logrotate")])]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/logrotate/logrotate",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/logrotate/logrotate"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/logrotate.d/nginx\n")])])]),n("blockquote",[n("p",[n("code",[t._v("kill -USR1 cat /usr/local/nginx/logs/nginx.pid")]),t._v(" 向nginx主进程发送USR1信号用于重新读取日志文件")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/home/nginx/logs/*.log { # 目录下所有以.log结尾的文件\n    daily # 按天切割\n    #dateformat %Y%m%d # 切割后文件后缀，不能使用log，否则会使文件进行继续切割\n    #extension .log # 切割文件后缀\n    rotate 7 # 保留天数\n    #create 0640 root root   # 切割后日志权限\n    missingok\n    dateext\n    notifempty\n    sharedscripts\n    prerotate\n        if [ -d /etc/logrotate.d/nginx ]; then \\  # 判断切割文件\n            run-parts /etc/logrotate.d/nginx; \\\n        fi \\\n    endscript\n    postrotate\n        [ -e /usr/local/nginx/logs/nginx.pid ] && kill -USR1 `cat /home/nginx/logs/nginx.pid`\n    endscript\n    postrotate\n        [ ! -f /var/nginx.pid ] || kill -USR1 `cat /home/nginx/logs/nginx.pid`\n    endscript\n}\n")])])]),n("h2",{attrs:{id:"主配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主配置"}},[t._v("#")]),t._v(" 主配置")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://blog.csdn.net/DeliaPu/article/details/108647180",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nginx配置文件解析"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/wxxjianchi/p/13582252.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx - HowOldAreYou - 博客园"),n("OutboundLink")],1)])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\nuser www www;\nworker_processes auto;\nerror_log /logs/nginx_error.log crit;\npid /logs/nginx.pid;\nworker_rlimit_nofile 51200;\nevents {\n    use epoll;\n    worker_connections 51200;\n    multi_accept on;\n}\nhttp {\n    # 扩展名与文件类型映射表\n    include mime.types;\n    #include luawaf.conf;\n    include proxy.conf;\n    include /vhost/*.conf;\n    # 默认类型\n    default_type application/octet-stream;\n    server_names_hash_bucket_size 512;\n    # 设置请求缓冲\n    client_header_buffer_size 32k;\n    large_client_header_buffers 4 32k;\n    client_max_body_size 500m;\n    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，\n    # 如果用来进行下载等应用磁盘 IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，\n    # 降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    sendfile on;\n    tcp_nopush on;\n    # 设置连接超时时间，单位是秒\n    keepalive_timeout 60;\n    tcp_nodelay on;\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 256k;\n    fastcgi_intercept_errors on;\n    # 开启gzip压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    gzip_http_version 1.1;\n    gzip_comp_level 2;\n    gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;\n    gzip_vary on;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_disable "MSIE [1-6]\\.";\n    limit_conn_zone $binary_remote_addr zone=perip:10m;\n    limit_conn_zone $server_name zone=perserver:10m;\n    server_tokens off;\n    access_log off;\n}\n')])])]),n("h2",{attrs:{id:"动静分离配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动静分离配置"}},[t._v("#")]),t._v(" 动静分离配置")]),t._v(" "),n("p",[n("strong",[t._v("静态文件在本地")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("server {\n    listen 80;\n    listen 443 ssl http2;\n    server_name www.woetu.com woetu.com;\n    index index.html index.htm default.htm default.html;\n    root html;\n    # SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则\n    #error_page 404/404.html;\n    # HTTP_TO_HTTPS_START\n    if ($server_port !~ 443) {\n        rewrite ^(/.*)$ https://$host$1 permanent;\n    }\n    # HTTP_TO_HTTPS_END\n    ssl_certificate /etc/letsencrypt/live/www/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/www/privkey.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    error_page 497 https://$host$request_uri;\n    # SSL-END\n    # ERROR-PAGE-START  错误页配置，可以注释、删除或修改\n    error_page 404 /404.html;\n    error_page 502 /502.html;\n    # ERROR-PAGE-END\n    # PROXY-START/\n    # 配置首页，这里必须要有一个=号\n    location =/ {\n        index index.html index.htm;\n    }\n    # 拦截静态文件后缀\n    location ~ .*\\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {\n        # 配置静态资源地址\n        root /home/html/index;\n    }\n    # 拦截静态文件后缀\n    #location ~ \\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$ {\n    # 配置静态资源地址\n    #        root /home/html/index;\n    #}\n    # 动态请求转发\n    location ~.*$ {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        # 解决https->nginx->http->tomcat重定向问题\n        proxy_redirect ~^http://([^:]+)(:\\d+)?(.*)$ https://$1$3;\n    }\n    # PROXY-END/\n    # 禁止访问的文件或目录\n    location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) {\n        return 404;\n    }\n    # 一键申请SSL证书验证目录相关设置\n    location ~ \\.well-known {\n        allow all;\n    }\n    access_log /logs/wwwlog;\n    error_log /logs/wwwlog;\n}\n")])])]),n("p",[n("strong",[t._v("静态文件在镜像存储")])]),t._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#PROXY-START/\nlocation = / {\n    #rewrite (.*) $1index.html;\n    index /index.html;\n}\n# 拦截静态文件后缀\nlocation ~ .*\\.(htm|html|js|css|jpg|png|gif|eot|svg|ttf|woff|woff2)$|/static/ {\n    # 配置静态资源地址\n    #root ./vhost/html;\n\troot "/index";\n\t# 将此处重写的URI作为一个新的URI在当前location中继续执行，并不会将新的URI转向其他location\n\trewrite ^(.*)$ /index/$1 break;\n\t\n\tproxy_pass https://test.cos.ap-hongkong.myqcloud.com;\n    #proxy_set_header Host $host;\n\tproxy_set_header Host test.cos.ap-hongkong.myqcloud.com;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    \n    add_header X-Cache $upstream_cache_status;\n    \n    #Set Nginx Cache\n    add_header Cache-Control no-cache;\n}\nlocation / {\n    proxy_pass http://127.0.0.1:8081;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    \n    add_header X-Cache $upstream_cache_status;\n    \n    #Set Nginx Cache\n    add_header Cache-Control no-cache;\n    #expires 12h;\n}\n\n#PROXY-END/\n')])])])])}),[],!1,null,null,null);e.default=o.exports}}]);